# Lua compatibility

# SSL_SESSION_ID
set_by_lua $ssl_session_id_compat '
        if ngx.var.https == "on" then
            return string.upper(ngx.var.ssl_session_id)
        end
        return nil';

# SSL_SESSION_RESUMED
set_by_lua $ssl_session_resumed_compat '
        if ngx.var.ssl_session_reused == "." then
            return "Initial"
        elseif ngx.var.ssl_session_reused == "r" then
            return "Resumed"
        end
        return nil';

# SSL_CIPHER_EXPORT (to be activated when SSL_CIPHER_USEKEYSIZE is available)
set_by_lua $ssl_cipher_export_compat '
        -- if ngx.var.https == "on" then
        --     if ngx.var.ssl_cipher_usekeysize < 56 then
        --         return "true"
        --     else
        --         return "false"
        --     end
        -- end
        return nil';

# SSL_CIPHER_USEKEYSIZE (TODO)
set_by_lua $ssl_cipher_usekeysize_compat '
        -- openssl = require("openssl")
        -- if ngx.var.https == "on" then
        --     local cipher = openssl.cipher.get(ngx.var.ssl_cipher)
        --     return cipher:info()["blocksize"]
        -- end
        return nil';

# SSL_CIPHER_ALGKEYSIZE (TODO)
set_by_lua $ssl_cipher_algkeysize_compat '
        return nil';

# SSL_VERSION_LIBRARY
set_by_lua $ssl_version_library_compat '
        if ngx.var.https == "on" then
            lua_openssl_version, lua_version, openssl_version = require("openssl").version()
            return openssl_version
        end
        return nil';

# SSL_CLIENT_M_VERSION
set_by_lua $ssl_client_m_version_compat '
        if ngx.var.https == "on" then
            return require("openssl").x509.read(ngx.var.ssl_client_raw_cert):version()+1
        end
        return nil';

# SSL_CLIENT_V_START (TODO)
set_by_lua $ssl_client_v_start_compat '
        if ngx.var.https == "on" then
            return require("openssl").x509.read(ngx.var.ssl_client_raw_cert):notbefore()
        end
        return nil';

# SSL_CLIENT_V_END (TODO)
set_by_lua $ssl_client_v_end_compat '
        if ngx.var.https == "on" then
            return require("openssl").x509.read(ngx.var.ssl_client_raw_cert):notafter()
        end
        return nil';

# SSL_CLIENT_V_REMAIN (TODO)
set_by_lua $ssl_client_v_remain_compat '
        return nil';

# SSL_CLIENT_A_SIG (TODO)
set_by_lua $ssl_client_a_sig_compat '
        return nil';

# SSL_CLIENT_A_KEY (TODO)
set_by_lua $ssl_client_a_key_compat '
        return nil';

# SSL variables

fastcgi_param	SSL_PROTOCOL		$ssl_protocol if_not_empty;
fastcgi_param	SSL_SESSION_ID		$ssl_session_id_compat if_not_empty;
fastcgi_param	SSL_SESSION_RESUMED	$ssl_session_resumed_compat if_not_empty; # nginx 1.5.11
#fastcgi_param	SSL_SECURE_RENEG
fastcgi_param	SSL_CIPHER		$ssl_cipher if_not_empty;
fastcgi_param	SSL_CIPHER_EXPORT	$ssl_cipher_export_compat if_not_empty;
fastcgi_param	SSL_CIPHER_USEKEYSIZE	$ssl_cipher_usekeysize_compat if_not_empty;
fastcgi_param	SSL_CIPHER_ALGKEYSIZE	$ssl_cipher_algkeysize_compat if_not_empty;
#fastcgi_param	SSL_COMPRESS_METHOD
#fastcgi_param	SSL_VERSION_INTERFACE
fastcgi_param	SSL_VERSION_LIBRARY	$ssl_version_library_compat if_not_empty;
fastcgi_param	SSL_CLIENT_M_VERSION	$ssl_client_m_version_compat if_not_empty;
fastcgi_param	SSL_CLIENT_M_SERIAL	$ssl_client_serial if_not_empty;
fastcgi_param	SSL_CLIENT_S_DN		$ssl_client_s_dn if_not_empty;
#fastcgi_param	SSL_CLIENT_S_DN_'x509'
fastcgi_param	SSL_CLIENT_I_DN		$ssl_client_i_dn if_not_empty;
#fastcgi_param	SSL_CLIENT_I_DN_'x509'
fastcgi_param	SSL_CLIENT_V_START	$ssl_client_v_start_compat if_not_empty;
fastcgi_param	SSL_CLIENT_V_END	$ssl_client_v_end_compat if_not_empty;
fastcgi_param	SSL_CLIENT_V_REMAIN	$ssl_client_v_remain_compat if_not_empty;
fastcgi_param	SSL_CLIENT_A_SIG	$ssl_client_a_sig_compat if_not_empty;
fastcgi_param	SSL_CLIENT_A_KEY	$ssl_client_a_key_compat if_not_empty;
fastcgi_param	SSL_CLIENT_CERT		$ssl_client_raw_cert if_not_empty;
#fastcgi_param	SSL_CLIENT_CERT_CHAIN_'n'
fastcgi_param	SSL_CLIENT_VERIFY	$ssl_client_verify if_not_empty; # not strictly similar to Apache version
#fastcgi_param	SSL_SERVER_M_VERSION
#fastcgi_param	SSL_SERVER_M_SERIAL
#fastcgi_param	SSL_SERVER_S_DN
#fastcgi_param	SSL_SERVER_S_DN_'x509'
#fastcgi_param	SSL_SERVER_I_DN
#fastcgi_param	SSL_SERVER_I_DN_'x509'
#fastcgi_param	SSL_SERVER_V_START
#fastcgi_param	SSL_SERVER_V_END
#fastcgi_param	SSL_SERVER_A_SIG
#fastcgi_param	SSL_SERVER_A_KEY
#fastcgi_param	SSL_SERVER_CERT
#fastcgi_param	SSL_SRP_USER
#fastcgi_param	SSL_SRP_USERINFO
#fastcgi_param	SSL_TLS_SNI		$ssl_server_name if_not_empty; # nginx 1.7.0
#fastcgi_param	SSL_CLIENT_FINGERPRINT	$ssl_client_fingerprint if_not_empty; # nginx 1.7.1

