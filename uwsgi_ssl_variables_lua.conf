# Lua compatibility

# SSL_SESSION_ID
set_by_lua $ssl_session_id_compat '
        if ngx.var.https == "on" then
            return string.upper(ngx.var.ssl_session_id)
        end
        return nil';

# SSL_SESSION_RESUMED
set_by_lua $ssl_session_resumed_compat '
        if ngx.var.ssl_session_reused == "." then
            return "Initial"
        elseif ngx.var.ssl_session_reused == "r" then
            return "Resumed"
        end
        return nil';

# SSL_CIPHER_ALGKEYSIZE (a bit hacky)
set_by_lua $ssl_cipher_algkeysize_compat '
        if ngx.var.https == "on" then
            if string.match(ngx.var.ssl_cipher,"AES(%d+)") then
                return string.match(ngx.var.ssl_cipher,"AES(%d+)")
            elseif string.match(ngx.var.ssl_cipher,"AES-(%d+)") then
                return string.match(ngx.var.ssl_cipher,"AES-(%d+)")
            elseif string.match(ngx.var.ssl_cipher,"CAMELLIA(%d+)") then
                return string.match(ngx.var.ssl_cipher,"CAMELLIA(%d+)")
            elseif string.match(ngx.var.ssl_cipher,"EXP") then
                return 40
            elseif string.match(ngx.var.ssl_cipher,"RC4") then
                return 128
            elseif string.match(ngx.var.ssl_cipher,"DES-CBC3") or string.match(ngx.var.ssl_cipher,"3DES") then
                return 168
            elseif string.match(ngx.var.ssl_cipher,"DES") then
                return 56
            end
        end
        return nil';

# SSL_CIPHER_USEKEYSIZE (a bit hacky)
set_by_lua $ssl_cipher_usekeysize_compat '
        return ngx.var.ssl_cipher_algkeysize_compat';

# SSL_CIPHER_EXPORT
set_by_lua $ssl_cipher_export_compat '
        if ngx.var.https == "on" and type(tonumber(ngx.var.ssl_cipher_usekeysize_compat)) == "number" then
            if tonumber(ngx.var.ssl_cipher_usekeysize_compat) < 56 then
                return "true"
            else
                return "false"
            end
        end
        return nil';

# SSL_VERSION_LIBRARY
set_by_lua $ssl_version_library_compat '
        if ngx.var.https == "on" then
            lua_openssl_version, lua_version, openssl_version = require("openssl").version()
            return openssl_version
        end
        return nil';

# SSL_CLIENT_M_VERSION
set_by_lua $ssl_client_m_version_compat '
        if ngx.var.https == "on" then
            return require("openssl").x509.read(ngx.var.ssl_client_raw_cert):version()+1
        end
        return nil';

# SSL_CLIENT_S_DN_C
set_by_lua $ssl_client_s_dn_c_compat '
        if ngx.var.https == "on" then
            -- return require("openssl").x509.read(ngx.var.ssl_client_raw_cert):subject():get_text("C") -- segfault in current lua-openssl
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):subject():oneline(),"/C=([^/]+)")
        end
        return nil';

# SSL_CLIENT_S_DN_ST
set_by_lua $ssl_client_s_dn_st_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):subject():oneline(),"/ST=([^/]+)")
        end
        return nil';

# SSL_CLIENT_S_DN_L
set_by_lua $ssl_client_s_dn_l_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):subject():oneline(),"/L=([^/]+)")
        end
        return nil';

# SSL_CLIENT_S_DN_O
set_by_lua $ssl_client_s_dn_o_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):subject():oneline(),"/O=([^/]+)")
        end
        return nil';

# SSL_CLIENT_S_DN_OU
set_by_lua $ssl_client_s_dn_ou_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):subject():oneline(),"/OU=([^/]+)")
        end
        return nil';

# SSL_CLIENT_S_DN_CN
set_by_lua $ssl_client_s_dn_cn_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):subject():oneline(),"/CN=([^/]+)")
        end
        return nil';

# SSL_CLIENT_S_DN_emailAddress
set_by_lua $ssl_client_s_dn_emailaddress_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):subject():oneline(),"/emailAddress=([^/]+)")
        end
        return nil';

# SSL_CLIENT_I_DN_C
set_by_lua $ssl_client_i_dn_c_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):issuer():oneline(),"/C=([^/]+)")
        end
        return nil';

# SSL_CLIENT_I_DN_ST
set_by_lua $ssl_client_i_dn_st_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):issuer():oneline(),"/ST=([^/]+)")
        end
        return nil';

# SSL_CLIENT_I_DN_L
set_by_lua $ssl_client_i_dn_l_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):issuer():oneline(),"/L=([^/]+)")
        end
        return nil';

# SSL_CLIENT_I_DN_O
set_by_lua $ssl_client_i_dn_o_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):issuer():oneline(),"/O=([^/]+)")
        end
        return nil';

# SSL_CLIENT_I_DN_OU
set_by_lua $ssl_client_i_dn_ou_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):issuer():oneline(),"/OU=([^/]+)")
        end
        return nil';

# SSL_CLIENT_I_DN_CN
set_by_lua $ssl_client_i_dn_cn_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):issuer():oneline(),"/CN=([^/]+)")
        end
        return nil';

# SSL_CLIENT_I_DN_emailAddress
set_by_lua $ssl_client_i_dn_emailaddress_compat '
        if ngx.var.https == "on" then
            return string.match(require("openssl").x509.read(ngx.var.ssl_client_raw_cert):issuer():oneline(),"/emailAddress=([^/]+)")
        end
        return nil';

# SSL_CLIENT_V_START
set_by_lua $ssl_client_v_start_compat '
        if ngx.var.https == "on" then
            return require("openssl").x509.read(ngx.var.ssl_client_raw_cert):notbefore()
        end
        return nil';

# SSL_CLIENT_V_END
set_by_lua $ssl_client_v_end_compat '
        if ngx.var.https == "on" then
            return require("openssl").x509.read(ngx.var.ssl_client_raw_cert):notafter()
        end
        return nil';

# SSL_CLIENT_V_REMAIN (TODO)
set_by_lua $ssl_client_v_remain_compat '
        return nil';

# SSL_CLIENT_A_SIG (TODO)
set_by_lua $ssl_client_a_sig_compat '
        return nil';

# SSL_CLIENT_A_KEY
set_by_lua $ssl_client_a_key_compat '
        if ngx.var.https == "on" then
            return require("openssl").x509.read(ngx.var.ssl_client_raw_cert):pubkey():parse()["type"] .. "Encryption"
        end
        return nil';

# SSL variables

uwsgi_param	SSL_PROTOCOL			$ssl_protocol if_not_empty;
uwsgi_param	SSL_SESSION_ID			$ssl_session_id_compat if_not_empty;
uwsgi_param	SSL_SESSION_RESUMED		$ssl_session_resumed_compat if_not_empty; # nginx 1.5.11
#uwsgi_param	SSL_SECURE_RENEG
uwsgi_param	SSL_CIPHER			$ssl_cipher if_not_empty;
uwsgi_param	SSL_CIPHER_EXPORT		$ssl_cipher_export_compat if_not_empty;
uwsgi_param	SSL_CIPHER_USEKEYSIZE		$ssl_cipher_usekeysize_compat if_not_empty;
uwsgi_param	SSL_CIPHER_ALGKEYSIZE		$ssl_cipher_algkeysize_compat if_not_empty;
#uwsgi_param	SSL_COMPRESS_METHOD
#uwsgi_param	SSL_VERSION_INTERFACE
uwsgi_param	SSL_VERSION_LIBRARY		$ssl_version_library_compat if_not_empty;
uwsgi_param	SSL_CLIENT_M_VERSION		$ssl_client_m_version_compat if_not_empty;
uwsgi_param	SSL_CLIENT_M_SERIAL		$ssl_client_serial if_not_empty;
uwsgi_param	SSL_CLIENT_S_DN			$ssl_client_s_dn if_not_empty;
uwsgi_param	SSL_CLIENT_S_DN_C		$ssl_client_s_dn_c_compat if_not_empty;
uwsgi_param	SSL_CLIENT_S_DN_ST		$ssl_client_s_dn_st_compat if_not_empty;
uwsgi_param	SSL_CLIENT_S_DN_L		$ssl_client_s_dn_l_compat if_not_empty;
uwsgi_param	SSL_CLIENT_S_DN_O		$ssl_client_s_dn_o_compat if_not_empty;
uwsgi_param	SSL_CLIENT_S_DN_OU		$ssl_client_s_dn_ou_compat if_not_empty;
uwsgi_param	SSL_CLIENT_S_DN_CN		$ssl_client_s_dn_cn_compat if_not_empty;
uwsgi_param	SSL_CLIENT_S_DN_emailAddress	$ssl_client_s_dn_emailaddress_compat if_not_empty;
uwsgi_param	SSL_CLIENT_I_DN			$ssl_client_i_dn if_not_empty;
uwsgi_param	SSL_CLIENT_I_DN_C		$ssl_client_i_dn_c_compat if_not_empty;
uwsgi_param	SSL_CLIENT_I_DN_ST		$ssl_client_i_dn_st_compat if_not_empty;
uwsgi_param	SSL_CLIENT_I_DN_L		$ssl_client_i_dn_l_compat if_not_empty;
uwsgi_param	SSL_CLIENT_I_DN_O		$ssl_client_i_dn_o_compat if_not_empty;
uwsgi_param	SSL_CLIENT_I_DN_OU		$ssl_client_i_dn_ou_compat if_not_empty;
uwsgi_param	SSL_CLIENT_I_DN_CN		$ssl_client_i_dn_cn_compat if_not_empty;
uwsgi_param	SSL_CLIENT_I_DN_emailAddress	$ssl_client_i_dn_emailaddress_compat if_not_empty;
uwsgi_param	SSL_CLIENT_V_START		$ssl_client_v_start_compat if_not_empty;
uwsgi_param	SSL_CLIENT_V_END		$ssl_client_v_end_compat if_not_empty;
uwsgi_param	SSL_CLIENT_V_REMAIN		$ssl_client_v_remain_compat if_not_empty;
uwsgi_param	SSL_CLIENT_A_SIG		$ssl_client_a_sig_compat if_not_empty;
uwsgi_param	SSL_CLIENT_A_KEY		$ssl_client_a_key_compat if_not_empty;
uwsgi_param	SSL_CLIENT_CERT			$ssl_client_raw_cert if_not_empty;
#uwsgi_param	SSL_CLIENT_CERT_CHAIN_'n'
uwsgi_param	SSL_CLIENT_VERIFY		$ssl_client_verify if_not_empty; # not strictly similar to Apache version
#uwsgi_param	SSL_SERVER_M_VERSION
#uwsgi_param	SSL_SERVER_M_SERIAL
#uwsgi_param	SSL_SERVER_S_DN
#uwsgi_param	SSL_SERVER_S_DN_'x509'
#uwsgi_param	SSL_SERVER_I_DN
#uwsgi_param	SSL_SERVER_I_DN_'x509'
#uwsgi_param	SSL_SERVER_V_START
#uwsgi_param	SSL_SERVER_V_END
#uwsgi_param	SSL_SERVER_A_SIG
#uwsgi_param	SSL_SERVER_A_KEY
#uwsgi_param	SSL_SERVER_CERT
#uwsgi_param	SSL_SRP_USER
#uwsgi_param	SSL_SRP_USERINFO
#uwsgi_param	SSL_TLS_SNI			$ssl_server_name if_not_empty; # nginx 1.7.0
#uwsgi_param	SSL_CLIENT_FINGERPRINT		$ssl_client_fingerprint if_not_empty; # nginx 1.7.1

